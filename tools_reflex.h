/*
 * tools_reflex.h
 * Author: Jesus Diaz Garcia
 */

#ifndef TOOLS_REFLEX_H
#define TOOLS_REFLEX_H

typedef u16 ReflexID;

enum ReflexType
{
	ReflexType_Trivial,
	ReflexType_Struct,
	ReflexType_Enum,
	ReflexType_COUNT,
};

struct ReflexTrivial
{
	u8 isBool : 1;
	u8 isFloat : 1;
	u8 isUnsigned : 1; // !bool and !float
	u8 isString : 1;
    u8 byteCount : 5;
	u8 elemCount;
};

struct ReflexMember
{
	const char *name;
	u8 isConst : 1;
	u8 isPointer : 1;
	u16 reflexId;
	u16 offset;
};

struct ReflexStruct
{
	const char *name;
	const ReflexMember *members;
	u16 memberCount;
	u16 size;
};

struct Reflex
{
	ReflexType type;
	union
	{
		const ReflexTrivial *trivial;
		const ReflexStruct *rstruct;
	};
};

// NOTE: Function generated by the reflection tool.
const Reflex* GetReflex(ReflexID id);

u32 ReflexGetTypeSize(ReflexID id)
{
	const Reflex* reflex = GetReflex(id);
	if ( reflex->type == ReflexType_Trivial )
	{
		const ReflexTrivial *trivial = reflex->trivial;
		const u32 size = trivial->elemCount * trivial->byteCount;
		return size;
	}
	else if ( reflex->type == ReflexType_Struct )
	{
		const ReflexStruct *rstruct = reflex->rstruct;
		const u32 size = rstruct->size;
		return size;
	}
	else
	{
		INVALID_CODE_PATH();
	}
	return 0;
}

#endif // #ifndef TOOLS_REFLEX_H

